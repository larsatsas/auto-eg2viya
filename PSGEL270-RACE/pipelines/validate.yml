import-validation-data:
  tags:
    - PSGEL270-Race
  stage: validate
  script:
# kind of a hack using sudo to get the essential data in place - normally you would have a separate process for getting data across (may want to do this differently?)
# source data
    - sudo cp exported/data/financials.sas7bdat /shared/gelcontent/gelcorp/finance/data
    - sudo cp exported/data/profit.csv /shared/gelcontent/gelcorp/finance/srcdata/
#expected results to compare against
    - sudo rm -rf /shared/gelcontent/gelcorp/expected/
    - sudo mkdir /shared/gelcontent/gelcorp/expected/
    - sudo cp exported/data/facility_state.sas7bdat /shared/gelcontent/gelcorp/expected
    - sudo cp exported/data/lookup_facility_name.sas7bdat /shared/gelcontent/gelcorp/expected
    - sudo cp exported/data/productline.sas7bdat /shared/gelcontent/gelcorp/expected


validate-EGimport:      # This job runs in the validate stage.
  needs: 
    - import-validation-data
  tags:
    - PSGEL270-Race
  stage: validate
  script:
    - echo "Validating the import on linux..."
    - gel_setCurrentNamespace target
    - export SAS_CLI_PROFILE=${current_namespace}
    - export SSL_CERT_FILE=~/.certs/${current_namespace}_trustedcerts.pem
    - export REQUESTS_CA_BUNDLE=${SSL_CERT_FILE}
    - /opt/pyviyatools/loginviauthinfo.py
    # Generate SAS code from the imported EG job that turned into a flow, so that we can test it
    - /opt/pyviyatools/callrestapi.py -m post -e /studioDevelopment/code/ -c "application/json" -i PSGEL270-RACE/config/Lookup_refresh.json -a "application/vnd.sas.code.generation.request+json" -o json | jq -r '.code' > code.sas
    - sas-viya batch jobs submit-pgm --pgm-path code.sas --context default --watch-output --wait-log-list
  # test against expected results
    - sas-viya batch jobs submit-pgm --pgm-path PSGEL270-RACE/flowsFromEG/testing/testLookup_Refresh.sas --context default --watch-output --wait-log-list
  artifacts:
    name: "$CI_PIPELINE_ID-$CI_JOB_NAME"
    paths:
      - "*.log"
      - "*.lst"
  when: manual # This setting turns a job into a manual one
  allow_failure: false

validate-DIimport:      # This job runs in the validate stage.
  needs: 
    - import-validation-data
  tags:
    - PSGEL270-Race
  stage: validate
  script:
    - echo "Validating the import on linux..."
    - gel_setCurrentNamespace target
    - export SAS_CLI_PROFILE=${current_namespace}
    - export SSL_CERT_FILE=~/.certs/${current_namespace}_trustedcerts.pem
    - export REQUESTS_CA_BUNDLE=${SSL_CERT_FILE}
    - /opt/pyviyatools/loginviauthinfo.py
    # Generate SAS code from the imported EG job that turned into a flow, so that we can test it
    - /opt/pyviyatools/callrestapi.py -m post -e /studioDevelopment/code/ -c "application/json" -i "PSGEL270-RACE/config/DIFT Parameterized Job for Company Profit Forecasts.json" -a "application/vnd.sas.code.generation.request+json" -o json | jq -r '.code' > code.sas
    - sas-viya batch jobs submit-pgm --pgm-path code.sas --context default --watch-output --wait-log-list
    # Just get the numbers out - we dont want to compare the formatting - they are by nature different due to different platforms
    - sudo grep '$-' '/shared/gelcontent/gelcorp/finance/html/Orion USA ProfitInfo.html' > actual_result
# Compare what we got now with what we had at the source environment
    - diff PSGEL270-RACE/flowsFromDI/financecontent/DataSupport/expected_results/Orion_USA_Profitnumbers.txt actual_result
  artifacts:
    name: "$CI_PIPELINE_ID-$CI_JOB_NAME"
    paths:
      - "*.log"
      - "*.lst"
  when: manual # This setting turns a job into a manual one
  allow_failure: false
